using ll = long long;

const int mod=7340033;
const int root = 5;
const int root_1 = 4404020;
const int root_pw=1<<20;

ll exgcd(ll a,ll b,ll &x,ll &y) {
    if(b==0) {
        x=1;
        y=0;
        return a;
    }
    ll x1,y1;
   	ll d=exgcd(b,a%b,x1,y1);
    x=y1;
    y=x1-(a/b)*y1;
    return d;
}

ll inverse(ll a,ll b) {
	ll x,y;
	ll gcd=exgcd(a,b,x,y);
	if(gcd!=1) return -1;
	x%=b;
	if(x<0) x+=b;
	return x;
}

void fft(vector<int>& a,bool invert) {
	int n=a.size();
	for(int i=1,j=0;i<n;++i) {
		int bit=n>>1;
		for(;j&bit;bit>>=1)
			j^=bit;
		j^=bit;
		if(i<j)
			swap(a[i],a[j]);
	}

	for(int len=2;len<=n;len<<=1) {
		int wlen=invert?root_1:root;
		for(int i=len;i<root_pw;i<<=1)
			wlen=(int)(1ll*wlen*wlen%mod);

		for(int i=0;i<n;i+=len) {
			int w=1;
			for(int j=0;j<len/2;++j) {
				int u=a[i+j],v=(int)(1ll*a[i+j+len/2]*w%mod);
				a[i+j]=u+v<mod?u+v:u+v-mod;
				a[i+j+len/2]=u-v>=0?u-v:u-v+mod;
				w=(int)(1ll*w*wlen%mod);
			}
		}
	}

	if(invert) {
		int n_1=inverse(ll(n),ll(mod));
		for(int& x:a) {
			x=(int)(1ll*x*n_1%mod);
		}
	}

}

vector<int> multiply(const vector<int>& a,const vector<int>& b) {
	vector<int> fa(a.begin(),a.end()),fb(b.begin(),b.end());
	int n=1,fN=a.size()+b.size()-1;
	while(n<a.size()+b.size()) n<<=1;
	fa.resize(n);
	fb.resize(n);
	fft(fa,false);
	fft(fb,false);
	for(int i=0;i<n;++i) fa[i]=(int)(1ll*fa[i]*fb[i]%mod);
	fft(fa,true);
	fa.resize(fN);
	return fa;
}




class LCA {
    int logn, n;
    vector <vector<int>> g, parent;
    vector<int> tin, tout;
    // vector<int> level;
    int eulrtim;

public:
    void dfs(int cur, int par) {
        // level[cur]=level[par]+1;
        tin[cur] = eulrtim;
        ++eulrtim;
        parent[cur][0] = par;
        for (int i = 1; i < logn; ++i) {
            parent[cur][i] = parent[parent[cur][i - 1]][i - 1];
        }
        for (auto it : g[cur]) {
            if (it != par) {
                dfs(it, cur);
            }
        }
        tout[cur] = eulrtim;
        ++eulrtim;
    }

    bool ispar(int x, int y) { return tin[x] <= tin[y] && tout[y] <= tout[x]; }

    int lca(int a, int b) {
        if (ispar(a, b)) {
            return a;
        }
        if (ispar(b, a)) {
            return b;
        }
        for (int i = logn - 1; ~i; --i) {
            if (parent[a][i] && !ispar(parent[a][i], b)) {
                a = parent[a][i];
            }
        }
        return parent[a][0];
    }

    void init(int n_, vector <vector<int>> &g_) {
        n = n_;
        logn = ceil(log(n + 1));
        swap(g, g_);
        parent.resize(n + 1, vector<int>(logn));
        tin.resize(n + 1);
        tout.resize(n + 1);
        // level.resize(n+1);
        eulrtim = 0;
    }
};

typedef int item;

class SgTree {
public:
    int szsg(int nn) {
        --nn;
        nn |= nn >> 1;
        nn |= nn >> 2;
        nn |= nn >> 4;
        nn |= nn >> 8;
        nn |= nn >> 16;
        ++nn;
        return nn << 1;
    }

    vector<int> lazy;
    vector <item> mn, mx, cnt;
    vector <ll> Sg;
    int n;

    SgTree(int n_, const vector <item> &ar) {
        n = n_;
        n_ = szsg(n_);
        lazy.resize(n_, No_Operation);
        mn.resize(n_, INT_MAX);
        mx.resize(n_, INT_MIN);
        cnt.resize(n_, 0);
        Sg.resize(n_, 0ll);
        build(0, 0, n - 1, ar);
    }

    void init(int n_, const vector <item> &ar) {
        n = n_;
        n_ = szsg(n_);
        lazy.resize(n_, No_Operation);
        mn.resize(n_, INT_MAX);
        mx.resize(n_, INT_MIN);
        cnt.resize(n_, 0);
        Sg.resize(n_, 0ll);
        build(0, 0, n - 1, ar);
    }

    void build(int nd, int sl, int sr, const vector <item> &ar) {
        int md = (sl + sr) >> 1, chl = nd << 1 | 1, chr = chl + 1;
        if (sl == sr) {
            mn[nd] = ar[sl];
            mx[nd] = ar[sl];
            cnt[nd] = 1;
            Sg[nd] = ar[sl];
            return;
        }
        build(chl, sl, md, ar);
        build(chr, md + 1, sr, ar);
        combine(nd, chl, chr);
        cnt[nd] = sr - sl + 1;
    }

    void combine(int nd, int chl, int chr) {
        mn[nd] = min(mn[chl], mn[chr]);
        mx[nd] = max(mx[chl], mx[chr]);
        Sg[nd] = Sg[chl] + Sg[chr];
    }

    int No_Operation = INT_MIN;

    void apply(int id, int val) {
        mn[id] = mx[id] = lazy[id] = val;
        Sg[id] = cnt[id] * val;
    }

    void propogate(int nd, int chl, int chr) {
        if (lazy[nd] == No_Operation) return;
        apply(chl, lazy[nd]);
        apply(chr, lazy[nd]);
        lazy[nd] = No_Operation;
    }

    void modify(int nd, int sl, int sr, int ql, int qr, int val) {
        int md = (sl + sr) >> 1, chl = nd << 1 | 1, chr = chl + 1;
        if (sl != sr) {
            propogate(nd, chl, chr);
        }
        if (qr < sl || sr < ql || mn[nd] >= val) {
            return;
        }
        if (ql <= sl && sr <= qr && mx[nd] <= val) {
            apply(nd, val);
            return;
        }
        modify(chl, sl, md, ql, qr, val);
        modify(chr, md + 1, sr, ql, qr, val);
        combine(nd, chl, chr);
    }

    item Rquery(int nd, int sl, int sr, int ql, int qr) {
        int md = (sl + sr) >> 1, chl = nd << 1 | 1, chr = chl + 1;
        if (sl != sr) {
            propogate(nd, chl, chr);
        }
        if (qr < sl || sr < ql) return 0;
        if (ql <= sl && sr <= qr) return Sg[nd];
        return Rquery(chl, sl, md, ql, qr) + Rquery(chr, md + 1, sr, ql, qr);
    }

    int bs(int nd, int sl, int sr, int ql, int qr, int &val) {
        int md = (sl + sr) >> 1, chl = nd << 1 | 1, chr = chl + 1;
        if (sl != sr) {
            propogate(nd, chl, chr);
        }
        if (qr < sl || sr < ql || mn[nd] > val) return 0;
        if (ql <= sl && sr <= qr) {
            if (Sg[nd] <= val) {
                val -= Sg[nd];
                return cnt[nd];
            }
            if (mn[nd] > val)
                return 0;
        }
        int ret = bs(chl, sl, md, ql, qr, val);
        ret += bs(chr, md + 1, sr, ql, qr, val);
        return ret;
    }
};

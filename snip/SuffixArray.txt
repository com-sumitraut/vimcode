class SuffixArray // lcp array ke sath
{
    string str;
    vector<int> p;
    int n;

public:
    SuffixArray() {
        cin >> str;
    }

    void count_sort(vector<int> &p, vector<int> &c) {
        vector<int> cnt(n);
        for (auto &x : c) {
            ++cnt[x];
        }
        vector<int> p_new(n);
        vector<int> pos(n);
        pos[0] = 0;
        for (int i = 1; i < n; ++i) {
            pos[i] = pos[i - 1] + cnt[i - 1];
        }
        for (auto &x : p) {
            int i = c[x];
            p_new[pos[i]] = x;
            ++pos[i];
        }
        p = p_new;
    }

    void algo() {
        str += '$';
        n = str.length();
        p.resize(n);
        vector<int> c(n);
        {
            vector <pair<int, int>> a(n);
            for (int i = 0; i < n; ++i)
                a[i] = {str[i], i};
            sort(a.begin(), a.end());
            for (int i = 0; i < n; ++i)
                p[i] = a[i].second;
            c[p[0]] = 0;
            for (int i = 1; i < n; ++i) {
                if (a[i].first == a[i - 1].first)
                    c[p[i]] = c[p[i - 1]];
                else
                    c[p[i]] = c[p[i - 1]] + 1;
            }
        }
        int k = 0;
        while ((1 << k) < n) {
            for (int i = 0; i < n; ++i) {
                p[i] = (p[i] - (1 << k) + n) % n;
            }
            count_sort(p, c);
            vector<int> c_new(n);
            c_new[p[0]] = 0;
            for (int i = 1; i < n; ++i) {
                pair<int, int> prev = {c[p[i - 1]], c[(p[i - 1] + (1 << k)) % n]};
                pair<int, int> now = {c[p[i]], c[(p[i] + (1 << k)) % n]};
                if (now == prev)
                    c_new[p[i]] = c_new[p[i - 1]];
                else
                    c_new[p[i]] = c_new[p[i - 1]] + 1;
            }
            c = c_new;
            ++k;
        }
        // for (int &it : p)
        // cout << it << ' ';
        // cout << '\n';
        // for (int i = 0; i < n; ++i)
        // {
        // cout<<i<<' ';
        // cout << p[i] << ' ' << str.substr(p[i], n - p[i]) << '\n';
        // suf[i]=str.substr(p[i],n-p[i]);
        // }
        // cout << '\n';
        vector<int> lcp(n);
        k = 0;
        for (int i = 0; i < n - 1; ++i) {
            int pi = c[i];
            int j = p[pi - 1];
            while (str[i + k] == str[j + k])
                ++k;
            lcp[pi] = k;
            k = max(0, k - 1);
        }
        for (int i = 0; i < n; ++i) {
            cout << lcp[i] << ' ' << p[i] << ' ' << str.substr(p[i], n - p[i]) << '\n';
        }
        cout << '\n';
    }
};

class SuffixArray {

public:
    SuffixArray() {}

    void count_sort(vector<int> &p, vector<int> &c) {
        int n = p.size();
        vector<int> cnt(n);
        for (auto &x : c) {
            ++cnt[x];
        }
        vector<int> p_new(n);
        vector<int> pos(n);
        pos[0] = 0;
        for (int i = 1; i < n; ++i) {
            pos[i] = pos[i - 1] + cnt[i - 1];
        }
        for (auto &x : p) {
            int i = c[x];
            p_new[pos[i]] = x;
            ++pos[i];
        }
        p = p_new;
    }

    void algo(string str) {
        str += '$';
        int n = str.length();
        vector<int> p(n), c(n);
        {
            vector <pair<int, int>> a(n);
            for (int i = 0; i < n; ++i)
                a[i] = {str[i], i};
            sort(a.begin(), a.end());
            for (int i = 0; i < n; ++i)
                p[i] = a[i].second;
            c[p[0]] = 0;
            for (int i = 1; i < n; ++i) {
                if (a[i].first == a[i - 1].first)
                    c[p[i]] = c[p[i - 1]];
                else
                    c[p[i]] = c[p[i - 1]] + 1;
            }
        }
        int k = 0;
        while ((1 << k) < n) {
            for (int i = 0; i < n; ++i) {
                p[i] = (p[i] - (1 << k) + n) % n;
            }
            count_sort(p, c);
            vector<int> c_new(n);
            c_new[p[0]] = 0;
            for (int i = 1; i < n; ++i) {
                pair<int, int> prev = {c[p[i - 1]], c[(p[i - 1] + (1 << k)) % n]};
                pair<int, int> now = {c[p[i]], c[(p[i] + (1 << k)) % n]};
                if (now == prev)
                    c_new[p[i]] = c_new[p[i - 1]];
                else
                    c_new[p[i]] = c_new[p[i - 1]] + 1;
            }
            c = c_new;
            ++k;
        }
        for (int &it:p)
            cout << it << ' ';
        cout << '\n';
        // for (int i = 0; i < n; ++i)
        // {
        //     cout << p[i] << ' ' << str.substr(p[i], n - p[i]) << '\n';
        // }
        // cout << '\n';
    }
};

//
class SuffixArray {

public:
    SuffixArray() {}

    void radix_sort(vector<pair<pair < int, int>, int>>

    & a) {
        int n = a.size();
        {
            vector<int> cnt(n);
            for (auto &x : a) {
                ++cnt[x.first.second];
            }
            vector < pair < pair < int, int >, int >> a_new(n);
            vector<int> pos(n);
            pos[0] = 0;
            for (int i = 1; i < n; ++i) {
                pos[i] = pos[i - 1] + cnt[i - 1];
            }
            for (auto &x : a) {
                int i = x.first.second;
                a_new[pos[i]] = x;
                ++pos[i];
            }
            a = a_new;
        }
        vector<int> cnt(n);
        for (auto &x : a) {
            ++cnt[x.first.first];
        }
        vector < pair < pair < int, int >, int >> a_new(n);
        vector<int> pos(n);
        pos[0] = 0;
        for (int i = 1; i < n; ++i) {
            pos[i] = pos[i - 1] + cnt[i - 1];
        }
        for (auto &x : a) {
            int i = x.first.first;
            a_new[pos[i]] = x;
            ++pos[i];
        }
        a = a_new;
    }

    void algo(string str) {
        str += '$';
        int n = str.length();
        vector<int> p(n), c(n);
        {
            vector <pair<int, int>> a(n);
            for (int i = 0; i < n; ++i)
                a[i] = {str[i], i};
            sort(a.begin(), a.end());
            for (int i = 0; i < n; ++i)
                p[i] = a[i].second;
            c[p[0]] = 0;
            for (int i = 1; i < n; ++i) {
                if (a[i].first == a[i - 1].first)
                    c[p[i]] = c[p[i - 1]];
                else
                    c[p[i]] = c[p[i - 1]] + 1;
            }
        }
        int k = 0;
        while ((1 << k) < n) {
            vector < pair < pair < int, int >, int >> a(n);
            for (int i = 0; i < n; ++i) {
                a[i] = {{c[i], c[(i + (1 << k)) % n]}, i};
            }
            // sort(a.begin(), a.end());
            radix_sort(a);
            for (int i = 0; i < n; ++i)
                p[i] = a[i].second;
            c[p[0]] = 0;
            for (int i = 1; i < n; ++i) {
                if (a[i].first == a[i - 1].first)
                    c[p[i]] = c[p[i - 1]];
                else
                    c[p[i]] = c[p[i - 1]] + 1;
            }
            ++k;
        }
        for (int &it:p)
            cout << it << ' ';
        cout << '\n';
        // for (int i = 0; i < n; ++i)
        // {
        //     cout << p[i] << ' ' << str.substr(p[i], n - p[i]) << '\n';
        // }
        // cout << '\n';
    }
};

//
class SuffixArray {

public:
    SuffixArray() {}

    void algo(string str) {
        str += '$';
        int n = str.length();
        vector<int> p(n), c(n);
        {
            vector <pair<int, int>> a(n);
            for (int i = 0; i < n; ++i)
                a[i] = {str[i], i};
            sort(a.begin(), a.end());
            for (int i = 0; i < n; ++i)
                p[i] = a[i].second;
            c[p[0]] = 0;
            for (int i = 1; i < n; ++i) {
                if (a[i].first == a[i - 1].first)
                    c[p[i]] = c[p[i - 1]];
                else
                    c[p[i]] = c[p[i - 1]] + 1;
            }
        }
        int k = 0;
        while ((1 << k) < n) {
            vector < pair < pair < int, int >, int >> a(n);
            for (int i = 0; i < n; ++i) {
                a[i] = {{c[i], c[(i + (1 << k)) % n]}, i};
            }
            sort(a.begin(), a.end());
            for (int i = 0; i < n; ++i)
                p[i] = a[i].second;
            c[p[0]] = 0;
            for (int i = 1; i < n; ++i) {
                if (a[i].first == a[i - 1].first)
                    c[p[i]] = c[p[i - 1]];
                else
                    c[p[i]] = c[p[i - 1]] + 1;
            }
            ++k;
        }
        for (int &it:p)
            cout << it << ' ';
        cout << '\n';
        // for (int i = 0; i < n; ++i)
        // {
        // cout << p[i] << ' ' << str.substr(p[i], n - p[i]) << '\n';
        // }
        // cout << '\n';
    }
};


const int x[] = {-1, -1, -1, 0, 1, 1, 1, 0}, y[] = {-1, 0, 1, 1, 1, 0, -1, -1};
int n, m;
vector <vector<bool>> vis;
vector <vector<int>> mt;

bool ok(int r, int c) { return -1 < r && r < n && -1 < c && c < m; }

bool solve() {
    cin >> n >> m;
    mt.clear(), mt.resize(n, vector<int>(m));
    vis.clear(), vis.resize(n, vector<bool>(m));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> mt[i][j];
        }
    }
    queue <array<int, 3>> Qu;
    // array<int,3> ch;
    Qu.push({0, 0, 0});
    vis[0][0] = 1;

    while (!Qu.empty()) {
        auto cur = Qu.front();
        Qu.pop();
        //
        for (int k = 0; k < 8; ++k) {
            auto chi = cur[0] + x[k], chj = cur[1] + y[k], di = cur[2] + 1;
            if (ok(chi, chj) && !vis[chi][chj]) {
                Qu.push({chi, chj, di});
                vis[chi][chj] = 1;
            }
        }
    }
}

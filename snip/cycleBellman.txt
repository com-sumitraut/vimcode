class Bellmanford {
    int n, m;
    vector <array<int, 3>> edge;
    vector<int> p;
    vector <ll> dis;
public:
    Bellmanford() {
        cin >> n >> m;
        edge.resize(m);
        dis.resize(n + 1, INT_MAX);
        p.resize(n + 1, -1);
        for (auto &it : edge)
            cin >> it[0] >> it[1] >> it[2];
    }

    void algo(int src) {
        dis[src] = 0;
        int x = -1;
        for (int i = 0; i < n; ++i) {
            x = -1;
            for (int j = 0; j < m; ++j) {
                if (dis[edge[j][0]] + edge[j][2] < dis[edge[j][1]]) {
                    dis[edge[j][1]] = dis[edge[j][0]] + edge[j][2];
                    p[edge[j][1]] = edge[j][0];
                    x = edge[j][1];
                }
            }
        }
        // deb(p,x);
        if (x == -1) {
            cout << "NO\n";
        } else {
            cout << "YES\n";
            int y = x;
            for (int i = 0; i < n; ++i) {
                y = p[y];
            }
            vector<int> cycle;
            for (int cele = y;; cele = p[cele]) {
                cycle.push_back(cele);
                if (cele == y && cycle.size() > 1) {
                    break;
                }
            }
            reverse(cycle.begin(), cycle.end());
            cout << cycle << '\n';
        }
    }
};
